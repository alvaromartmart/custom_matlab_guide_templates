function install_guide_template(figfile,mfile,template_name,varargin)
% INSTALL_GUIDE_TEMPLATE allows adding GUI templates to MATLAB's GUIDE tool
%   INSTALL_GUIDE_TEMPLATE(FILENAME_FIG,FILENAME_M,NAME) adds the template
%   with name NAME
%   
%   INSTALL_GUIDE_TEMPLATE() shows a file selection dialog. The user can
%   select either the .m or .fig file and the other file is automatically
%   detected. An input dialog is shown to edit the TEMPLATE NAME
%
%   INSTALL_GUIDE_TEMPLATE(___,PARAM1,VAL1,PARAM2,VAL2,___)
%
%   Parameters include:
%
%   'Thumbnail'             Path to .gif file to be shown as the template
%                           preview.
%                           Note: a MATLAB restart is apparently needed for
%                           the GUIDE template selection dialog to show the
%                           image.
%
%   Remarks
%   -------
%   * A line starting the "Copyright" keyword is automatically added to the
%   .m file written to the templates folder if none is present in the
%   original .m file. This is because GUIDE tries to remove this line when
%   'cloning' the template, and raises an error otherwise.
%   The actual file generated by GUIDE with the selected template will not
%   contain this line.
%
%   * In some cases it may be necessary to run MATLAB with admin privileges
%   for the script to be able to write to the guide templates folder.
%
%   Examples
%   --------
%
%       % Add a new template with name 'My custom template'
%       install_guide_template('.\myTemplate.fig','.\myTemplate.m','My custom template');
%       
%       % Run guide. The template selection dialog will be displayed with
%       % the newly created template listed.
%       guide
%
%   See also guide, remove_guide_template
% 
%   Alvaro Martinez, 2017 - alvaro.mart.mart+dev@gmail.com
%   v. 1.0
% -------------------------------------------------------------------------

    % Parse input arguments
    inputArgs = parseInputs(varargin);

    if ~nargin
        % Ask user for files
        [userFile,template_path] = uigetfile('*.m;*.fig','Select .m or .fig file');
        if ~userFile
            disp('Template installation cancelled by user');
            return
        end
        [~,~,ext] = fileparts(userFile);
        switch ext
            case '.m'
                mfile = strcat(template_path,userFile);
                figfile = strrep(mfile,'.m','.fig');
            case '.fig'
                figfile = strcat(template_path,userFile);
                mfile = strrep(figfile,'.fig','.m');
            otherwise
                error('Invalid file. Select a .m or .fig file');
        end
    end
    if ~exist(mfile,'file')
        error('.m file not found (%s)',mfile);
    elseif ~exist(figfile,'file')
        error('.fig file not found (%s)',figfile);
    end
    
    % Process input
    [~,template_file,template_ext] = fileparts(mfile);
    
    if ~nargin || isempty(template_name)
        answer = inputdlg('Template name','Template name',1,{template_file});
        if isempty(answer)
            disp('Template installation cancelled by user');
            return
        else
            template_name = answer{1};
        end
    end
    
    %% Find templates folder
    mat_root = matlabroot;
    templates_folder = [mat_root '\toolbox\matlab\guide\guitemplates\'];
    existing_templates = dir([templates_folder '*.m']);
    if ismember([template_file '.m'],{existing_templates.name})
        answer = questdlg('This template is already on the templates folder. Overwrite?');
        if isempty(answer) || strcmp(answer,'No') || strcmp(answer,'Cancel')
            disp('Template installation cancelled by user');
            return
        end
    end
    
    %% Copy files to templates folder
    fprintf('Copying template files...\n');
    % Make sure the mfile contains the keyword "Copyright" that is removed
    % by MATLAB when cloning the template, in order to avoid an error.
    filecontents = fileread(mfile);
    if ~strcmp(filecontents,'Copyright')
        filecontents = sprintf('%s\n%% Copyright\n',filecontents);
        [fid,message] = fopen([templates_folder template_file template_ext],'wt');
        if fid ~= -1
            fprintf(fid,'%s',filecontents);
            fclose(fid);
        else
            error(['install_guide_template couldn''t write the file %s\nReason: "%s"\n',...
                'Try starting MATLAB with administrative privileges and run the script again.\n\n',...
                'Template installation aborted.\n'],...
                [templates_folder template_file template_ext],message);
        end
    else
        copyfile(mfile,[templates_folder template_file template_ext]);
    end
    copyfile(figfile,[templates_folder template_file '.fig']);
    if ischar(inputArgs.Thumbnail) && exist(inputArgs.Thumbnail,'file')
        copyfile(inputArgs.Thumbnail,[templates_folder template_file '.gif']);
    else
        addpath(template_path);
        % Try to generate thumbnail
        open(figfile); drawnow; pause(0.25);
%         run(mfile); drawnow; pause(0.5) % Alternative to open(figfile) if the GUI needs to be updated before capturing the screenshot
        figs = findall(0,'type','figure');
        frame = getframe(figs(end));
        close(figs(end));
        imind = frame2im(frame);
        imind = imresize(imind,[166 276]);
        [imind, cmp] = rgb2ind(imind,128);
        outfile = [templates_folder template_file '.gif'];
        imwrite(imind,cmp,outfile,'gif');
        fprintf('\tThumbnail updated.\n');
    end
    fprintf('Files copied to <a href="matlab:winopen(''%s'')">templates folder</a>.\n',templates_folder);

    %% Edit templates .xml file
    templates_info_file = [mat_root '\toolbox\matlab\guide\templateinfo.xml'];
    
    % Make backup
    templates_info_file_backup = strrep(templates_info_file,'.xml','_backup.xml');
    if ~exist(templates_info_file_backup,'file')
        % Backup
        copyfile(templates_info_file,templates_info_file_backup);
    end

    % Read xml contents
    xDoc = xmlread(templates_info_file);
    
    skip = false;

    groupItems = xDoc.getElementsByTagName('Group');
    allListItems = groupItems.item(0).getElementsByTagName('Template');
    fprintf('Currently installed templates:\n');
    for i=0:allListItems.getLength-1
        thisListitem = allListItems.item(i);
        tname = thisListitem.getAttribute('Name');
        if strcmp(tname,template_name)
            skip = true;
            fprintf('\t> %s[Template already in .xml]\n',tname);
            break;
        end
        fprintf('\t- %s\n',tname);
    end

    if ~skip
        % Add new item
        newListItem = xDoc.createElement('Template');
        newListItem.setAttribute('File',template_file);
        newListItem.setAttribute('Name',template_name);
        groupItems.item(0).insertBefore(newListItem,allListItems.item(allListItems.getLength));

        % Save xml
        xmlwrite(templates_info_file,xDoc);
    end
    
    fprintf('Template "%s" successfully installed.\n',template_name);
    fprintf('\tRun <a href="matlab:guide">guide</a> command to see list of installed templates\n\n');
end

function cfg = parseInputs(args)
    p = inputParser;
    % Define optional parameters
    addParameter(p,'Thumbnail',[],@(x) isempty(x) || (ischar(x) && exist(x,'file')));
    % Parse and return "cfg" struct
    parse(p,args{:});
    cfg = p.Results;
end
